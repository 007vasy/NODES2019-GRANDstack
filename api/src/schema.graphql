type Venue {
   name: String!
   sessions: [Session] @relation(name: "IN", direction: "IN")
}

type Speaker {
   name: String!
   works_for: [Company] @relation(name: "WORKS_FOR", direction: "OUT")
   presents: [Session] @relation(name: "PRESENTS", direction: "OUT")
}

type Company {
   name: String!
   speakers: [Speaker] @relation(name: "WORKS_FOR", direction: "IN")
}

type Subject {
   name: String!
   sessions: [Session] @relation(name: "HAS_SUBJECT", direction: "IN")
}

type Tag {
   name: String!
   sessions: [Session] @relation(name: "HAS_TAG", direction: "IN")
}

type Session {
   audience: String!
   description: String
   event_end: DateTime!
   event_start: DateTime!
   id: String!
   name: String!
   photo: String
   in: [Venue] @relation(name: "IN", direction: "OUT")
   has_subject: [Subject] @relation(name: "HAS_SUBJECT", direction: "OUT")
   has_tag: [Tag] @relation(name: "HAS_TAG", direction: "OUT")
   speakers: [Speaker] @relation(name: "PRESENTS", direction: "IN")
   
   recommended(first: Int = 3): [Session] @cypher(statement: """
    MATCH (this)-[:HAS_TAG|HAS_SUBJECT]->()<-[:HAS_TAG|HAS_SUBJECT]-(rec:Session)
    WITH rec, COUNT(*) AS score
    RETURN rec ORDER BY score DESC LIMIT $first
   """)
}